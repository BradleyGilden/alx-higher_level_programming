=========================+
Module: 7-base_geometry /
=======================/

****************************** initialization *******************************

# Import module
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Class takes no arguments:
>>> bg = BaseGeometry("hey")
Traceback (most recent call last):
TypeError: BaseGeometry() takes no arguments

# Correct initialization
>>> bg = BaseGeometry()

# print object
>>> print(bg)  # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at ...>

*****************************************************************************

::::::::::::;
Functions: /
::::::::::/

.......
area /
..../
    @EXPECTED FAILURE

    #printing area as a property
    >>> print(bg.area) # doctest: +ELLIPSIS
    <bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at ...>>

::

    #calling area()
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

....................
integer_validator /
................./
    @EXPECTED SUCCESS

    #passing in string name and positive int value
    >>> bg.integer_validator("sameJ", 700)

::

    #passing in a non-string name and int value
    >>> bg.integer_validator(117, 47)

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    @EXPECTED FAILURE

    #printing as a property
    >>> print(bg.integer_validator)  # doctest: +ELLIPSIS
    <bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry object at ...>>

::

    #passing in a string name and non-int value
    >>> bg.integer_validator("Ryan", "Gosling")
    Traceback (most recent call last):
    TypeError: Ryan must be an integer

::

    #passing in a string name and 0 int value
    >>> bg.integer_validator("Jujutsu Kaisen", 0)
    Traceback (most recent call last):
    ValueError: Jujutsu Kaisen must be greater than 0

::

    #passing in a string name and negative int value
    >>> bg.integer_validator("Celsius", -273)
    Traceback (most recent call last):
    ValueError: Celsius must be greater than 0
