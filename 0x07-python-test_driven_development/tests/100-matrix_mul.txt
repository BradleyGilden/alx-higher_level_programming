Module: 100-matrix_mul
==================

# Import module
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Functions:
~~~~~~~~~~

matrix_mul
---------
    @EXPECTED SUCESS

    # Using valid m_a and m_b with ints, with m_a.rows = m_b.cols
    >>> matrix_mul([[15, 5, 3], [9, 7, 9]], [[1, 4], [13, 2], [17, 6]])
    [[131, 88], [253, 104]]

        xxxxxxxxxx

    # Using valid m_a and m_b with float and ints, with m_a.rows = m_b.cols
    >>> matrix_mul([[15, 5.1, 3], [9, 7, 9.2]], [[1, 4.3], [13, 2.4], [17, 6]])
    [[132.3, 94.74], [256.4, 110.69999999999999]]

        xxxxxxxxxx

    # Using square matrix m_a and square matrix m_b
    >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
    [[19, 22], [43, 50]]

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    @EXPECTED FAILURE

    # Using invalid m_a type
    >>> matrix_mul("1, 2, 3", [[4], [5], [6]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

        xxxxxxxxxx

    # Using invalid m_b type
    >>> matrix_mul([[1], [2], [3]], "4, 5, 6")
    Traceback (most recent call last):
    TypeError: m_b must be a list

        xxxxxxxxxx

    # When m_a is not a list of lists
    >>> matrix_mul([1, 2, 3], [[4], [5], [6]])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

        xxxxxxxxxx

    # Using invalid sublist element type for m_b
    >>> matrix_mul([[1, 2, 3]], [4])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

        xxxxxxxxxx

    # Using invalid sublist element type for m_a
    >>> matrix_mul([[1, 2, 3]], [4])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

        xxxxxxxxxx
